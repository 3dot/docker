global
	user haproxy
	group haproxy
	maxconn 1024
	pidfile /var/run/haproxy.pid

defaults
	balance roundrobin
	mode http
	option abortonclose
	option forwardfor
	option http-server-close
	stats enable
	stats hide-version
	stats refresh 5s
	stats uri /haproxy
	timeout client 60s
	timeout connect 60s
	timeout server 60s

frontend http
	bind :80
	bind :443 ssl crt /data/cert/ ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!3DES:!MD5:!PSK
{{range $host, $containers := groupByMulti $ "Env.VIRTUAL_HOST" ","}}
	use_backend http_{{$host}} if { hdr(host) -i {{$host}} }
	use_backend http_{{$host}} if { ssl_fc_sni {{$host}} }
{{end}}

{{range $host, $containers := groupByMulti $ "Env.VIRTUAL_HOST" ","}}
backend http_{{$host}}
	{{range $index, $value := $containers}}
		{{$addrLen := len $value.Addresses}}
		{{if eq $addrLen 1}}
			{{with $address := index $value.Addresses 0}}
	server {{$address.IP}}:{{$address.Port}} {{$address.IP}}:{{$address.Port}} check
			{{end}}
		{{else if $value.Env.VIRTUAL_PORT}}
			{{range $i, $address := $value.Addresses}}
				{{if eq $address.Port $value.Env.VIRTUAL_PORT}}
	server {{$address.IP}}:{{$address.Port}} {{$address.IP}}:{{$address.Port}} check
				{{end}}
			{{end}}
		{{else}}
			{{range $i, $address := $value.Addresses}}
				{{if eq $address.Port "80"}}
	server {{$address.IP}}:{{$address.Port}} {{$address.IP}}:{{$address.Port}} check
				{{end}}
			{{end}}
		{{end}}
	{{end}}
{{end}}
