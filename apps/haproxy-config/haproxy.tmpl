global
	user haproxy
	group haproxy
	maxconn 1024
	pidfile /var/run/haproxy.pid

defaults
	balance roundrobin
	mode http
	option abortonclose
	option forwardfor
	option http-server-close
	timeout client 60s
	timeout connect 60s
	timeout server 60s

frontend http-in
	bind :80
	acl host_{{$host}} hdr(host) -i {{$host}}
	acl host_{{$host}} hdr(host) -i {{$master}} path_beg {{$dir}}
{{range $host, $containers := groupByMulti $ "Env.VIRTUAL_HOST"}}
	use_backend http_{{$host}} if host_{{$host}}
{{end}}

frontend https-in
	bind :443 ssl /data/host.pem
	acl host_{{$host}} hdr(host) -i {{$host}}
	acl host_{{$host}} hdr(host) -i {{$master}} path_beg {{$dir}}
{{range $host, $containers := groupByMulti $ "Env.VIRTUAL_HOST"}}
	use_backend http_{{$host}} if host_{{$host}}
{{end}}

listen stats :1936
	stats enable
	stats hide-version
	stats refresh 5s
	stats uri /

{{range $host, $containers := groupByMulti $ "Env.VIRTUAL_HOST"}}
backend http_{{$host}}
	{{range $index, $value := $containers}}
		{{$addrLen := len $value.Addresses}}
		{{if eq $addrLen 1}}
			{{with $address := index $value.Addresses 0}}
	server {{$address.IP}} {{$address.IP}}:{{$address.Port}}
			{{end}}
		{{else if $value.Env.VIRTUAL_PORT}}
			{{range $i, $address := $value.Addresses}}
				{{if eq $address.Port $value.Env.VIRTUAL_PORT}}
	server {{$address.IP}} {{$address.IP}}:{{$address.Port}}
				{{end}}
			{{end}}
		{{else}}
			{{range $i, $address := $value.Addresses}}
				{{if eq $address.Port "80"}}
	server {{$address.IP}} {{$address.IP}}:{{$address.Port}}
				{{end}}
			{{end}}
		{{end}}
	{{end}}
{{end}}
